buildscript {
	ext {
		springBootVersion = '1.5.2.RELEASE'
	}
	repositories {
    	mavenCentral()
    	jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    	classpath 'com.bmuschko:gradle-docker-plugin:3.0.6'
		classpath 'org.hidetake:gradle-ssh-plugin:2.8.0'
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'org.hidetake.ssh'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

jar {
	baseName = 'toz-core'
	version = '0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

springBoot {
	executable = true
}

task buildImage(type: DockerBuildImage) {
    inputDir = file('./')
    tag = 'toz/backend'
}

task createContainer(type: DockerCreateContainer) {
    dependsOn buildImage
    targetImageId { buildImage.getImageId() }
    portBindings = ['8080:8080']
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId { createContainer.getContainerId() }
}

task stopContainer(type: DockerStopContainer) {
    targetContainerId { createContainer.getContainerId() }
}

task functionalTest(type: Test) {
    dependsOn startContainer
    // TODO is anybody hear me? What should I call here?
    finalizedBy stopContainer
}

remotes {
	openstack {
		host = 'patronage'
		user = 'debian'
		identity = file('/home/mlo/.ssh/id_rsa')
	}
}

task deploy {
	doLast {
		ssh.run {
			session(remotes.openstack) {
				execute 'sudo service toz-dev stop'
				put from: 'build/libs/toz-core-0.1-SNAPSHOT.jar', into: 'dev/toz-core-0.1-SNAPSHOT.jar'
				execute 'sudo service toz-dev start'
			}
		}
	}
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.liquibase:liquibase-core')
	compile('org.projectlombok:lombok')
	compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
	compile group: 'org.assertj', name: 'assertj-core', version: '3.6.2'
	compile group: 'org.assertj', name: 'assertj-joda-time', version: '2.0.0'

	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.6.1'
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.6.1'

	compile project(':iban-validator')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile group: 'com.tngtech.java', name: 'junit-dataprovider', version: '1.12.0'

	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('com.h2database:h2')
	runtime('org.postgresql:postgresql')

	configurations.all {
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if (details.requested.group == 'org.springframework.boot' && details.requested.name == 'spring-boot-starter-logging') {
				details.useTarget group: details.requested.group, name: 'spring-boot-starter-log4j2', version: details.requested.version
			}
		}
	}
}
